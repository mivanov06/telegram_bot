from aiogram import Router, Bot
from aiogram.filters import Command, CommandStart, Text
from aiogram.types import Message, CallbackQuery, pre_checkout_query, successful_payment, LabeledPrice, FSInputFile, \
    InputMediaPhoto, InputMediaDocument
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config_data.config import load_config, PHOTOS
from keyboards import user_keyboards
from keyboards.keyboard_utils import get_inline_keyboard
from lexicon.lexicon_ru import LEXICON_RU

router = Router()

import os


class GetUserInfo(StatesGroup):
    new_user = State()
    service = State()  # –¢–∏–ø –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    master = State()  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å
    date = State()  # –î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
    time = State()  # –í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è
    name = State()  # –ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –∫–ª–∏–µ–Ω—Ç
    phone = State()  # –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
    pay = State()  # –û–ø–ª–∞—Ç–∏–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å—Ä–∞–∑—É (True/False)
    pay_yes = State()  #
    pay_no = State()


class GetCommentInfo(StatesGroup):
    text = State()
    user_name = State()
    save = State()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    menu = [
        ('–î–∞, —Ö–æ—á—É!', 'menu1'),
    ]
    folder = 'files'
    image = 'imagestart.jpg'
    file = FSInputFile(f'{folder}/{image}')
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)

    await message.answer_photo(
        photo=file,
        caption='–ü—Ä–∏–≤–µ—Ç. –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ —Ä–æ–±–æ—Ç–µ?',
        reply_markup=keyboard
    )


@router.callback_query(Text(contains=['menu1']))
async def menu1(callback: CallbackQuery):
    menu = [
        ('–î–∞–ª–µ–µ =>', 'menu2'),
    ]
    folder = 'files'
    image = 'image01.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file)
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['menu2']))
async def menu2(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'menu1'),
        ('–î–∞–ª–µ–µ =>', 'menu3'),
    ]
    folder = 'files'
    image = 'image02.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file)
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['menu3']))
async def menu3(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'menu2'),
        ('–î–∞–ª–µ–µ =>', 'menu4'),
    ]
    folder = 'files'
    image = 'image03.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file)
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['menu4']))
async def menu4(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'menu3'),
        ('–î–∞–ª–µ–µ =>', 'menu5'),
    ]
    folder = 'files'
    image = 'image04.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file)
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['menu5']))
async def menu5(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'menu4'),
        ('–î–∞–ª–µ–µ =>', 'menu6'),
    ]
    folder = 'files'
    image = 'image05.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file)
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['menu6']))
async def menu6(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'menu5'),
        ('–î–∞–ª–µ–µ =>', 'menu7'),
    ]
    folder = 'files'
    image = 'image06.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file)
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['menu7']))
async def menu7(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'menu6'),
        ('–î–∞–ª–µ–µ =>', 'menu8'),
    ]
    folder = 'files'
    image = 'image07.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file)
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['menu8']))
async def menu8(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'menu7'),
        ('–î–∞–ª–µ–µ =>', 'menu9'),
    ]
    folder = 'files'
    image = 'image08.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file)
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['menu9']))
async def menu9(callback: CallbackQuery):
    menu = [
        ('HERMES', 'Hermes'),
        ('EVE', 'Eve'),
    ]
    folder = 'files'
    image = 'image09.jpg'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2, back_menu=True)
    file = FSInputFile(f'{folder}/{image}')
    photo = InputMediaPhoto(media=file, caption='–ö–∞–∫–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?')
    await callback.message.edit_media(media=photo, reply_markup=keyboard)


@router.callback_query(Text(contains=['Hermes']))
async def menuBroker(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'menu9'),
        ('–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è', 'binance'),
    ]
    folder = 'files'
    doc = 'register_broker.pdf'
    text = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ (https://my.roboforex.com/en/?a=zoyq) –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±—Ä–æ–∫–µ—Ä–µ'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{doc}')
    doc = InputMediaDocument(media=file, caption=text)
    await callback.message.edit_media(media=doc, reply_markup=keyboard)


@router.callback_query(Text(contains=['binance']))
async def menu_binance(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'Hermes'),
        ('–Ø –ø–æ–ø–æ–ª–Ω–∏–ª', 'ypc'),
    ]
    folder = 'files'
    doc = 'binance.pdf'
    text = '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á—ë—Ç ROBOFOREX\n' \
           '–ú–æ–∂–Ω–æ —Å –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏\n' \
           '–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —á–µ—Ä–µ–∑ BINANCE'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{doc}')
    doc = InputMediaDocument(media=file, caption=text)
    await callback.message.edit_media(media=doc, reply_markup=keyboard)


@router.callback_query(Text(contains=['ypc']))
async def menu_ypc(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'binance'),
        ('–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è', 'terminal'),
    ]
    folder = 'files'
    doc = 'register_ypc.pdf'
    text = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ\n' \
           '(https://my.forex-box.com/aff.php?aff=10151 \n ' \
           '–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{doc}')
    doc = InputMediaDocument(media=file, caption=text)
    await callback.message.edit_media(media=doc, reply_markup=keyboard)


@router.callback_query(Text(contains=['terminal']))
async def menu_terminal(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'binance'),
        ('–Ø —É—Å—Ç–∞–Ω–æ–≤–∏–ª', 'get_message'),
    ]
    folder = 'files'
    doc = 'install_terminal.pdf'
    text = '1. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –£–†–°.\n' \
           '2.–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª - —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{doc}')
    doc = InputMediaDocument(media=file, caption=text)
    await callback.message.edit_media(media=doc, reply_markup=keyboard)


@router.callback_query(Text(contains=['get_message']))
async def menu_terminal(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'terminal'),
        ('–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª', 'send_message'),
    ]
    folder = 'files'
    image = 'imagestart.jpg'
    text = '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞–∑–µ—Ü –Ω–∏–∂–µ üëáüèΩ\n' \
           '–§–∞–º–∏–ª–∏—è –ò–º—è\n' \
           '–ù–æ–º–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞\n' \
           '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º.\n\n' \
           '–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n' \
           '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω\n' \
           '35534257\n' \
           '@ivanov55'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    doc = InputMediaPhoto(media=file, caption=text)
    await callback.message.edit_media(media=doc, reply_markup=keyboard)


@router.callback_query(Text(contains=['send_message']))
async def menu_terminal(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'get_message'),
        ('–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª', 'send_key'),
    ]
    folder = 'files'
    image = 'imagestart.jpg'
    text = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É:' \
           '[üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µüì® ]' \
           '–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥:\n' \
           '–ö—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤—Ç—å –¥–∞–Ω–Ω—ã–µ\n'  \
           '–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n' \
           '–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [‚¨ÖÔ∏è –ù–∞–∑–∞–¥]'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    doc = InputMediaPhoto(media=file, caption=text)
    await callback.message.edit_media(media=doc, reply_markup=keyboard)


@router.callback_query(Text(contains=['send_key']))
async def menu_terminal(callback: CallbackQuery):
    menu = [
        ('<= –ù–∞–∑–∞–¥', 'send_message'),
        ('–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª', 'send_key'),
    ]
    folder = 'files'
    image = 'imagestart.jpg'
    text = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É:\n' \
           '[üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µüì® ]\n' \
           '–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥:\n' \
           '–ö—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤—Ç—å –¥–∞–Ω–Ω—ã–µ\n' \
           '–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n' \
           '–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [‚¨ÖÔ∏è –ù–∞–∑–∞–¥]'
    keyboard = get_inline_keyboard(menu, buttons_in_row=2)
    file = FSInputFile(f'{folder}/{image}')
    doc = InputMediaPhoto(media=file, caption=text)
    await callback.message.edit_media(media=doc, reply_markup=keyboard)









# --------------------------------------------------------------------------

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É
@router.message(Text(contains=['START_KEYBOARD']))
async def process_help_command(message: Message):
    await message.answer(
        text=LEXICON_RU['/help'],
    )


# # --------------------------------------------------------------------------
#
#
# @router.callback_query(Text(contains=['–û –Ω–∞—Å']))
# async def about(callback: CallbackQuery):
#     services = Service.objects.all()
#     text = LEXICON_RU['about']
#     for service in services:
#         text = f'{text}\n- {service.name}'
#     await callback.message.edit_text(
#         text=text,
#         reply_markup=user_keyboards.start_keyboard()
#     )
#
#
# # --------------------------------------------------------------------------
#
#
# @router.callback_query(Text(text=['–ú–æ–∏ –∑–∞–ø–∏—Å–∏']))
# async def get_my_schedules(callback: CallbackQuery):
#     user_id = callback.message.from_user.id
#     try:
#         user = User.objects.get(telegram_id=user_id)
#         user_id = user.pk
#         user_text = f'<b>{user.name} ({user.phone}</b>)\n'
#     except User.DoesNotExist:
#         user_text = '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
#         user_id = None
#     my_schedules = Schedule.objects.filter(user_id=user_id).order_by('-date', 'timeslot')
#     for my_schedule in my_schedules:
#         _, time_my_schedule = TIMESLOT_LIST[my_schedule.timeslot]
#         my_schedule_text = f'–î–∞—Ç–∞: {my_schedule.date}. –í—Ä–µ–º—è: {time_my_schedule}\n' \
#                            f'–£—Å–ª—É–≥–∞: {my_schedule.services.name}\n' \
#                            f'–ú–∞—Å—Ç–µ—Ä: {my_schedule.specialist.name}\n'
#         user_text += '----------------------\n'
#         user_text += my_schedule_text
#     await callback.message.edit_text(
#         text=user_text,
#         reply_markup=user_keyboards.start_keyboard(),
#         parse_mode='HTML'
#     )
#
#
# # --------------------------------------------------------------------------
#
#
# @router.callback_query(Text(contains=['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']))
# async def set_text_comment(callback: CallbackQuery, state: FSMContext):
#     await callback.message.edit_text(
#         text='–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:'
#     )
#     await state.set_state(GetCommentInfo.text)
#
#
# @router.message(GetCommentInfo.text)
# async def set_user_name_comment(message: Message, state: FSMContext):
#     text = message.text
#     await state.update_data(text=text)
#     await message.answer(
#         text='–í–∞—à–µ –∏–º—è:'
#     )
#     await state.set_state(GetCommentInfo.save)
#
#
# @router.message(GetCommentInfo.save)
# async def save_comment(message: Message, state: FSMContext):
#     user_name = message.text
#     user_data = await state.get_data()
#     await state.update_data(user_name=user_name)
#     comment = Comment.objects.create()
#     comment.text = user_data['text']
#     comment.user_name = user_name
#     comment.save()
#
#     await message.answer(
#         text='–°–ø–∞—Å–∏–±–æ –æ–± –æ—Ç–∑—ã–≤–µ –æ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã!',
#         reply_markup=user_keyboards.start_keyboard()
#
#     )
#     await state.clear()
#
#
# # --------------------------------------------------------------------------
#
#
# @router.callback_query(Text(text=['call_us']))
# async def call_us(callback: CallbackQuery):
#     # keyboard =
#     await callback.message.edit_text(
#         text='–ú—ã —Ä–∞–¥—ã –∑–≤–æ–Ω–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n8(800) 555 35 35',
#         reply_markup=user_keyboards.start_keyboard()
#     )
#
#
# @router.callback_query(Text(contains=['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è']))
# async def sign_up(callback: CallbackQuery, state: FSMContext):
#     await callback.message.edit_text(
#         text=LEXICON_RU['rules'],
#         reply_markup=user_keyboards.agree_keyboard()
#     )
#     user_id = int(callback.message.from_user.id)
#     await state.update_data(user_id=user_id)
#     await state.set_state(GetUserInfo.new_user)
#
#
# @router.callback_query(GetUserInfo.new_user)
# async def get_service_type(callback: CallbackQuery, state: FSMContext):
#     await callback.message.edit_text(
#         text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:',
#         reply_markup=user_keyboards.type_service_keyboard()
#     )
#     await state.update_data(service=callback.data)
#     await state.set_state(GetUserInfo.service)
#     await callback.answer()
#
#
# @router.callback_query(GetUserInfo.service)
# async def get_master(callback: CallbackQuery, state: FSMContext):
#     service = callback.data.split()[1]
#     await state.update_data(service=service)
#
#     await callback.message.edit_text(
#         text='–ö –∫–∞–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
#         reply_markup=user_keyboards.masters_keyboard(service)
#     )
#     await state.set_state(GetUserInfo.master)
#     await callback.answer()
#
#
# @router.callback_query(GetUserInfo.master)
# async def get_procedure_date(callback: CallbackQuery, state: FSMContext):
#     master = callback.data.split()[1]
#     await state.update_data(master=master)
#
#     await callback.message.edit_text(
#         text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:',
#         reply_markup=user_keyboards.date_work_master_keyboard(master)
#     )
#     await state.set_state(GetUserInfo.date)
#     await callback.answer()
#
#
# @router.callback_query(GetUserInfo.date)
# async def get_procedure_time(callback: CallbackQuery, state: FSMContext):
#     date = callback.data.split()[1]
#     user_data = await state.get_data()
#     await state.update_data(date=date)
#
#     master_id = user_data['master']
#     await callback.message.edit_text(
#         text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:',
#         reply_markup=user_keyboards.time_work_master_keyboard(master_id, date)
#     )
#     await state.set_state(GetUserInfo.time)
#     await callback.answer()
#
#
# @router.callback_query(GetUserInfo.time)
# async def get_user_name(callback: CallbackQuery, state: FSMContext):
#     time_slot = callback.data.split()[1]
#     await state.update_data(time_slot=time_slot)
#
#     await callback.message.edit_text(
#         text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:'
#     )
#     await state.set_state(GetUserInfo.name)
#     await callback.answer()
#
#
# @router.message(GetUserInfo.name)
# async def get_phone_number(message: Message, state: FSMContext):
#     name = message.text
#     await state.update_data(name=name)
#
#     await message.answer(
#         text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:'
#     )
#     await state.set_state(GetUserInfo.phone)
#
#
# @router.message(GetUserInfo.phone)
# async def process_phone(message: Message, state: FSMContext):
#     phone = message.text
#     await state.update_data(phone=phone)
#     user_data = await state.get_data()
#     date = user_data['date']
#     await message.answer(
#         text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏ {date} –ø–æ –∞–¥—Ä–µ—Å—É address.\n–•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—Ä–∞–∑—É?',
#         reply_markup=user_keyboards.pay_keyboard()
#     )
#     await state.set_state(GetUserInfo.pay)
#
#
# @router.callback_query(Text(contains=['pay_no']))
# async def check_pay(callback: CallbackQuery, state: FSMContext):
#     user_data = await state.get_data()
#     user, created = User.objects.get_or_create(telegram_id=user_data['user_id'])
#     if created:
#         user.name = user_data['name']
#         user.telegram_id = user_data['user_id']
#         user.phone = user_data['phone']
#         user.save()
#     date = user_data['date']
#     time_slot = user_data['time_slot']
#     await state.update_data(pay=False)
#     schedule = Schedule.objects.create(date=user_data['date'],
#                                        timeslot=user_data['time_slot'],
#                                        user=user,
#                                        specialist_id=int(user_data['master']),
#                                        services_id=int(user_data['service'])
#                                        )
#     schedule.save()
#     await callback.message.edit_text(
#         text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏ {date} {time_slot} –ø–æ –∞–¥—Ä–µ—Å—É address",
#         reply_markup=user_keyboards.start_keyboard()
#     )
#     await state.clear()
#
#
# @router.callback_query(Text(contains=['pay_yes']))
# async def process_storage_conditions(message: Message, bot: Bot, state: FSMContext):
#     user_data = await state.get_data()
#     service = Service.objects.get(pk=user_data['service'])
#     price = [LabeledPrice(label=str(service.name), amount=int(service.price * 100))]
#     await state.update_data(amount=service.price)
#     await bot.send_invoice(
#         message.from_user.id,
#         title=service.name,
#         description='–û–ø–ª–∞—Ç–∞ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø–æ—Ü–µ–¥—É—Ä—ã.',
#         provider_token=load_config().payment_token.p_token,
#         currency='rub',
#         photo_url=PHOTOS[f'{service.name}'],
#         is_flexible=False,
#         prices=price,
#         start_parameter='example',
#         payload='test-invoice-payload'
#     )
#
#     await state.set_state(GetUserInfo.pay_yes)
#
#
# @router.pre_checkout_query(lambda query: True)
# async def pre_checkout_query(pre_checkout_q: pre_checkout_query.PreCheckoutQuery, bot: Bot):
#     await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
#
#
# @router.message()
# async def successful_payment(message: Message, state: FSMContext):
#     if message.successful_payment:
#         user_data = await state.get_data()
#         user, created = User.objects.get_or_create(telegram_id=user_data['user_id'])
#         if created:
#             user.name = user_data['name']
#             user.telegram_id = user_data['user_id']
#             user.phone = user_data['phone']
#             user.save()
#         schedule = Schedule.objects.create(
#             date=user_data['date'],
#             timeslot=user_data['time_slot'],
#             user=user,
#             specialist_id=int(user_data['master']),
#             services_id=int(user_data['service']),
#             pay=True,
#             amount=user_data['amount']
#         )
#         schedule.save()
#         date = user_data['date']
#         time_slot = user_data['time_slot']
#         _, time_my_schedule = TIMESLOT_LIST[time_slot]
#         await message.answer(
#             text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏ {date} {time_my_schedule} –ø–æ –∞–¥—Ä–µ—Å—É address",
#             reply_markup=user_keyboards.start_keyboard()
#         )
#         await state.clear()
